<Appendix Label="alltopic">
<Heading>&YAGS; Functions by Topic</Heading>

A complete list of all {\YAGS}'s functions by topic.

  <Section Label="tmostcommonfunctions">
  <Heading>Most Common Functions</Heading>

<List>

<Item><C>AddEdges( <G>, <A>E</A> )</C><Br/> 
Returns a new graph obtained from <G> by adding the list of edges in <A>E</A>.
(<Ref Label="AddEdges"/>)
</Item>

<Item><C>Adjacency( <G>, <x> )</C><Br/> 
Returns the list of vertices in <G> which are adjacent to vertex <x>.
(<Ref Label="Adjacency"/>)
</Item>

<Item><C>AutGroupGraph( <G> )</C><Br/> 
Returns the automorphism group of graph <G>. A synonym is `AutomorphismGroup( <G> )'.
(<Ref Label="AutGroupGraph"/>)
</Item>

<Item><C>BoxProduct( <G>, <H> );</C><Br/> 
Returns the BoxProduct (or cartesian product) of graphs <G> and <H>.
(<Ref Label="BoxProduct"/>)
</Item>

<Item><C>BoxTimesProduct( <G>, <H> )</C><Br/> 
Returns the BoxTimesProduct (or strong product) of graphs <G> and <H>.
(<Ref Label="BoxTimesProduct"/>)
</Item>

<Item><C>Circulant( <n>, <Jumps> )</C><Br/> 
Returns minimal $(1, 2, ..., n)$-invariant graph where vertex 1 is adjacent 
to vertices in <Jumps>.
(<Ref Label="Circulant"/>)
</Item>

<Item><C>CliqueGraph( <G> )</C><Br/> 
<C>CliqueGraph( <G>, <maxNumCli> )</C><Br/> 
Returns the intersection graph of the (maximal) cliques of <G>; aborts if 
<maxNumCli> cliques are found.
(<Ref Label="CliqueGraph"/>)
</Item>

<Item><C>Cliques( <G> )</C><Br/> 
<C>Cliques( <G>, <maxNumCli> )</C><Br/> 
Returns the list of (maximal) cliques of <G>; aborts if <maxNumCli> cliques are found.
(<Ref Label="Cliques"/>)
</Item>

<Item><C>ComplementGraph( <G> )</C><Br/> 
Returns the new graph <H> such that  $V(H)=V(G)$ and $xy\in E(H) \iff xy \not\in E(G)$.
(<Ref Label="ComplementGraph"/>)
</Item>

<Item><C>CompleteGraph( <n> )</C><Br/> 
Returns the graph on <n> vertices having all possible edges present.
(<Ref Label="CompleteGraph"/>)
</Item>

<Item><C>CompleteMultipartiteGraph( <n1>, <n2> [, <n3> ...] )</C><Br/> 
Returns the graph with $r\geq 2$ parts of orders <n1>, <n2>, ... such that each vertex is adjacent exactly to all the vertices in the other parts not containing itself.
(<Ref Label="CompleteMultipartiteGraph"/>)
</Item>

<Item><C>ConnectedComponents( <G> )</C><Br/> 
Returns the equivalece partition of $V(G)$ corresponding to the equivalence relation *reachable* in <G>.
(<Ref Label="ConnectedComponents"/>)
</Item>

<Item><C>CycleGraph( <n> )</C><Br/> 
Returns the cyclic graph on <n> vertices. 
(<Ref Label="CycleGraph"/>)
</Item>

<Item><C>Diameter( <G> )</C><Br/> 
Returns the maximum among the distances between pairs of vertices of <G>.
(<Ref Label="Diameter"/>)
</Item>

<Item><C>DiscreteGraph( <n> )</C><Br/> 
Returns the graph on <n> vertices with no edges.
(<Ref Label="DiscreteGraph"/>)
</Item>

<Item><C>DisjointUnion( <G>, <H> )</C><Br/> 
Returns the disjoint union of two graphs <G> and <H>.
(<Ref Label="DisjointUnion"/>)
</Item>

<Item><C>Distance( <G>, <x>, <y> )</C><Br/> 
Returns the length of a minimal path connecting <x> to <y> in <G>.
(<Ref Label="Distance"/>)
</Item>

<Item><C>Draw( <G> )</C><Br/> 
Draws the graph <G> on a new window.
(<Ref Label="Draw"/>)
</Item>

<Item><C>Edges( <G> )</C><Br/> 
Returns the list of edges of graph <G>.
(<Ref Label="Edges"/>)
</Item>

<Item><C>GraphAttributeStatistics( <OrderList>, <ProbList>, <Attribute> )</C><Br/>
Returns statistics for graph attribute <Attribute>. 
(<Ref Label="GraphAttributeStatistics"/>)
</Item>

<Item><C>GraphByAdjacencies( <AdjList> )</C><Br/> 
Returns  a  new  graph  having  <AdjList>  as its list of adjacencies.
(<Ref Label="GraphByAdjacencies"/>)
</Item>

<Item><C>GraphByAdjMatrix( <Mat> )</C><Br/> 
Returns  a  new  graph  created from an adjacency matrix <Mat>.
(<Ref Label="GraphByAdjMatrix"/>)
</Item>

<Item><C>GraphByCompleteCover( <Cover> )</C><Br/> 
Returns the graph where the elements of <Cover> are (the vertex sets of) complete subgraphs.
(<Ref Label="GraphByCompleteCover"/>)
</Item>

<Item><C>GraphByEdges( <L> )</C><Br/> 
Returns the minimal graph such that the pairs in <L> are edges.
(<Ref Label="GraphByEdges"/>)
</Item>

<Item><C>GraphByRelation( <V>, <Rel> )</C><Br/> 
(<Ref Label="GraphByRelation"/>)
</Item>

<Item><C>GraphByRelation( <n>, <Rel> )</C><Br/> 
Returns  a  new  graph  <G> where $xy \in E(G)$ iff <Rel(x,y)=true>.
(<Ref Label="GraphByRelation"/>)
</Item>

<Item><C>GraphByWalks( <Walk1>, <Walk2>,...)</C><Br/> 
Returns the minimal graph such that <Walk1>, <Walk2>, etc are Walks.
(<Ref Label="GraphByWalks"/>)
</Item>

<Item><C>GraphSum( <G>, <L> )</C><Br/> 
Returns the lexicographic sum of a list of graphs <L> over a graph <G>.
(<Ref Label="GraphSum"/>)
</Item>

<Item><C>InducedSubgraph( <G>, <V> )</C><Br/> 
Returns the subgraph of graph <G> induced by the vertex set <V>.
(<Ref Label="InducedSubgraph"/>)
</Item>

<Item><C>InNeigh( <G>, <x> )</C><Br/> 
Returns the list of in-neighbors of <x> in <G>.
(<Ref Label="InNeigh"/>)
</Item>

<Item><C>IntersectionGraph( <L> )</C><Br/> 
Returns the graph <G> where $V(G)=L$ and $XY\in E(G) \iff X\cap Y \neq \varnothing$.
(<Ref Label="IntersectionGraph"/>)
</Item>

<Item><C>IsEdge( <G> , <x>, <y> )</C><Br/> 
<C>IsEdge( <G> , [<x>,<y>] )</C><Br/> 
Returns `true' if `[<x>,<y>]' is an edge of <G>.
(<Ref Label="IsEdge"/>)
</Item>

<Item><C>IsIsomorphicGraph( <G>, <H> )</C><Br/> 
Returns `true' when <G> is isomorphic to <H> and `false' otherwise.
(<Ref Label="IsIsomorphicGraph"/>)
</Item>

<Item><C>Join( <G>, <H> )</C><Br/> 
Returns the disjoint union of <G> and <H> with all the possible edges between <G> and <H> added.
(<Ref Label="Join"/>)
</Item>

<Item><C>LineGraph( <G> )</C><Br/> 
Returns the intersection graph of the edges of <G>.
(<Ref Label="LineGraph"/>)
</Item>

<Item><C>Link( <G>, <x> )</C><Br/> 
Returns the subgraph induced in <G> by the neighbors of <x>.
(<Ref Label="Link"/>)
</Item>

<Item><C>MaxDegree( <G> )</C><Br/> 
Returns the maximum degree in graph <G>.
(<Ref Label="MaxDegree"/>)
</Item>

<Item><C>Order(<G>)</C><Br/> 
Returns the number of vertices, of graph <G>.
(<Ref Label="Order"/>)
</Item>

<Item><C>PathGraph( <n> )</C><Br/> 
Returns the path graph on <n> vertices.
(<Ref Label="PathGraph"/>)
</Item>

<Item><C>QuotientGraph( <G>, <Part> )</C><Br/> 
<C>QuotientGraph( <G>, <L1>, <L2> )</C><Br/> 
Returns the quotient graph of graph <G> given a vertex partition <Part>, by identifying any two vertices in the same part.
(<Ref Label="QuotientGraph"/>)
</Item>

<Item><C>RandomGraph( <n>, <p> )</C><Br/> 
<C>RandomGraph( <n> )</C><Br/> 
Returns a random graph of order <n> with edge probability $p$ (a rational in $[0,1]$).
(<Ref Label="RandomGraph"/>)
</Item>

<Item><C>RemoveEdges( <G>, <A>E</A> )</C><Br/> 
Returns  a  new graph created from graph <G> by removing the edges in list <A>E</A>.
(<Ref Label="RemoveEdges"/>)
</Item>

<Item><C>SetDefaultGraphCategory( <Catgy> )</C><Br/> 
Sets  the default graph category to <Catgy>.
(<Ref Label="SetDefaultGraphCategory"/>)
</Item>

<Item><C>Size(<G>)</C><Br/> 
Returns the number of edges of graph <G>.
(<Ref Label="Size"/>)
</Item>

<Item><C>TimesProduct( <G>, <H> )</C><Br/> 
Returns  the  times  product (tensor product) $G  \times  H$ of two graphs <G> and <H>.
(<Ref Label="TimesProduct"/>)
</Item>

<Item><C>TrivialGraph</C><Br/> 
The one vertex graph.(<Ref Label="TrivialGraph"/>)
</Item>

<Item><C>VertexDegree( <G>, <x> )</C><Br/> 
Returns the degree of vertex <x> in Graph <G>.
(<Ref Label="VertexDegree"/>)
</Item>

<Item><C>VertexNames(<G>)</C><Br/> 
Returns  the  list of names of the vertices of <G>.
(<Ref Label="VertexNames"/>)
</Item>

<Item><C>WheelGraph( <n> )</C><Br/> 
<C>WheelGraph( <n>, <r> )</C><Br/> 
This  is  the   cone  of  an  <n>-cycle; when present, <r> is the radius of the wheel.
(<Ref Label="WheelGraph"/>)
</Item>
</List>

  </Section>
  <Section Label="tdrawing">
  <Heading>Drawing</Heading>

<List>
  
<Item><C>Coordinates( <G> )</C><Br/> 
Returns the list of coordinates of the vertices of <G> if they exist; fail otherwise.
(<Ref Label="Coordinates"/>)
</Item>

<Item><C>Draw( <G> )</C><Br/>
Draws the graph <G> on a new window.
(<Ref Label="Draw"/>)
</Item>

<Item><C>GraphToRaw( <FileName>, <G> )</C><Br/>
Writes the graph <G> in raw format to the file  <FileName>.
(<Ref Label="GraphToRaw"/>)
</Item>

<Item><C>GraphUpdateFromRaw( <FileName>, <G> )</C><Br/>
Updates  the  coordinates  of  <G>  from  a file <FileName> in raw format.
(<Ref Label="GraphUpdateFromRaw"/>)
</Item>

<Item><C>SetCoordinates( <G>, <Coord> ) </C><Br/>
Sets  the  coordinates  of the vertices of <G>, which are used to draw <G> by `Draw( <G> )'.
(<Ref Label="SetCoordinates"/>)
</Item>
</List>
  
  </Section>
  <Section Label="tconstructinggraphs">
  <Heading>Constructing Graphs</Heading>
  
<List>
  
<Item><C>AddEdges( <G>, <A>E</A> )</C><Br/> 
Returns a new graph obtained from <G> by adding the list of edges in <A>E</A>.
(<Ref Label="AddEdges"/>)
</Item>

<Item><C>AddVerticesByAdjacencies( <G>, <NewAdjList> )</C><Br/> 
Returns a new graph obtained from <G> by adding some vertices with adjacencies described by <NewAdjList>.
(<Ref Label="AddVerticesByAdjacencies"/>)
</Item>

<Item><C>Graph( <Rec> )</C><Br/> 
Returns  a  new  graph  created  from  the  information in record  <Rec>.
(<Ref Label="Graph"/>)
</Item>

<Item><C>GraphByAdjacencies( <AdjList> )</C><Br/> 
Returns  a  new  graph  having  <AdjList>  as its list of adjacencies.
(<Ref Label="GraphByAdjacencies"/>)
</Item>

<Item><C>GraphByAdjMatrix( <Mat> )</C><Br/> 
Returns  a  new  graph  created from an adjacency matrix <Mat>.
(<Ref Label="GraphByAdjMatrix"/>)
</Item>

<Item><C>GraphByCompleteCover( <Cover> )</C><Br/> 
Returns the graph where the elements of <Cover> are (the vertex sets of) complete subgraphs.
(<Ref Label="GraphByCompleteCover"/>)
</Item>

<Item><C>GraphByEdges( <L> )</C><Br/> 
Returns the minimal graph such that the pairs in <L> are edges.
(<Ref Label="GraphByEdges"/>)
</Item>

<Item><C>GraphByRelation( <V>, <Rel> )</C><Br/> 
<C>GraphByRelation( <n>, <Rel> )</C><Br/> 
Returns  a  new  graph  <G> where $xy \in E(G)$ iff <Rel(x,y)=true>.
(<Ref Label="GraphByRelation"/>)
</Item>

<Item><C>GraphByWalks( <Walk1>, <Walk2>,...)</C><Br/> 
Returns the minimal graph such that <Walk1>, <Walk2>, etc are Walks.
(<Ref Label="GraphByWalks"/>)
</Item>

<Item><C>IntersectionGraph( <L> )</C><Br/> 
Returns the graph <G> where $V(G)=L$ and $XY\in E(G) \iff X\cap Y \neq \varnothing$.
(<Ref Label="IntersectionGraph"/>)
</Item>

<Item><C>RandomGraph( <n>, <p> )</C><Br/> 
<C>RandomGraph( <n> )</C><Br/> 
Returns a random graph of order <n> with edge probability $p$ (a rational in $[0,1]$).
(<Ref Label="RandomGraph"/>)
</Item>

<Item><C>RemoveEdges( <G>, <A>E</A> )</C><Br/> 
Returns  a  new graph created from graph <G> by removing the edges in list <A>E</A>.
(<Ref Label="RemoveEdges"/>)
</Item>

<Item><C>RemoveVertices( <G>, <V> )</C><Br/> 
Returns  a  new  graph  created from graph <G> by removing the vertices in list <V>.
(<Ref Label="RemoveVertices"/>)
</Item>

</List>

  </Section>
  <Section Label="tfamilies">
  <Heading>Families of Graphs</Heading>

<List>

<Item><C>AGraph</C><Br/> 
A 4-cycle with two pendant vertices on consecutive vertices of the cycle.
(<Ref Label="AGraph"/>)
</Item>

<Item><C>AntennaGraph</C><Br/> 
A `HouseGraph' with a pendant vertex (antenna) on the roof.
(<Ref Label="AntennaGraph"/>)
</Item>

<Item><C>BullGraph</C><Br/> 
A triangle with two pendant vertices (horns).
(<Ref Label="BullGraph"/>)
</Item>

<Item><C>ChairGraph</C><Br/> 
A tree with degree sequence 3,2,1,1,1.
(<Ref Label="ChairGraph"/>)
</Item>

<Item><C>Circulant( <n>, <Jumps> )</C><Br/> 
Returns minimal $(1, 2, ..., n)$-invariant graph where vertex 1 is adjacent to vertices in <Jumps>.
(<Ref Label="ChairGraph"/>)
</Item>

<Item><C>ClawGraph</C><Br/> 
The graph on 4 vertices, 3 edges, and maximum degree 3.
(<Ref Label="ClawGraph"/>)
</Item>

<Item><C>ClockworkGraph( <NNFSList> )</C><Br/>
<C>ClockworkGraph( <NNFSList>, <rank> )</C><Br/>
<C>ClockworkGraph( <NNFSList>, <Perm> )</C><Br/>
<C>ClockworkGraph( <NNFSList>, <rank>, <Perm> )</C><Br/>
Returns the clockwork graph specified by its parameters.
(<Ref Label="ClockworkGraph"/>)
</Item>

<Item><C>CompleteBipartiteGraph( <n>, <m> )</C><Br/> 
Returns the minimal graph such that all vertices in $\{1..n\}$ are adjacent to all in $\{n+1..n+m\}$.
(<Ref Label="CompleteBipartiteGraph"/>)
</Item>

<Item><C>CompleteGraph( <n> )</C><Br/> 
Returns the graph on <n> vertices having all possible edges present.
(<Ref Label="CompleteGraph"/>)
</Item>

<Item><C>CompleteMultipartiteGraph( <n1>, <n2> [, <n3> ...] )</C><Br/> 
Returns the graph with $r\geq 2$ parts of orders <n1>, <n2>, ... such that each vertex is adjacent exactly to all the vertices in the other parts not containing itself.
(<Ref Label="CompleteMultipartiteGraph"/>)
</Item>

<Item><C>Cube</C><Br/> 
The 1-skeleton of Plato's cube.
(<Ref Label="Cube"/>)
</Item>

<Item><C>CubeGraph( <n> )</C><Br/> 
Returns the underlying graph of the <n>-hypercube.
(<Ref Label="CubeGraph"/>)
</Item>

<Item><C>CycleGraph( <n> )</C><Br/> 
Returns the cyclic graph on <n> vertices. 
(<Ref Label="CycleGraph"/>)
</Item>

<Item><C>CylinderGraph( <b>, <h> )</C><Br/> 
Returns graph on $b(h+1)$ vertices which is a $\{4,6\}$-regular triangulation of the cylinder.
(<Ref Label="CylinderGraph"/>)
</Item>

<Item><C>DartGraph</C><Br/> 
A diamond with a pendant vertex and maximum degree 4.
(<Ref Label="DartGraph"/>)
</Item>

<Item><C>DiamondGraph</C><Br/> 
The graph on 4 vertices and 5 edges.
(<Ref Label="DiamondGraph"/>)
</Item>

<Item><C>DiscreteGraph( <n> )</C><Br/> 
Returns the graph on <n> vertices with no edges.
(<Ref Label="DiscreteGraph"/>)
</Item>

<Item><C>Dodecahedron</C><Br/> 
The 1-skeleton of Plato's Dodecahedron.
(<Ref Label="Dodecahedron"/>)
</Item>

<Item><C>DominoGraph</C><Br/> 
Two squares glued by an edge.
(<Ref Label="DominoGraph"/>)
</Item>

<Item><C>FanGraph( <n> )</C><Br/> 
Returns the <n>-Fan: The join of a vertex and a (<n>+1)-path.
(<Ref Label="FanGraph"/>)
</Item>

<Item><C>FishGraph</C><Br/> 
A square and a triangle glued by a vertex.
(<Ref Label="FishGraph"/>)
</Item>

<Item><C>GemGraph</C><Br/> 
The 3-Fan graph.
(<Ref Label="GemGraph"/>)
</Item>

<Item><C>HouseGraph</C><Br/> 
A 4-Cycle and a triangle glued by an edge.
(<Ref Label="HouseGraph"/>)
</Item>

<Item><C>Icosahedron</C><Br/> 
The 1-skeleton of Plato's icosahedron.
(<Ref Label="Icosahedron"/>)
</Item>

<Item><C>JohnsonGraph( <n>, <r> )</C><Br/> 
Returns a new graph <G> where <V(G)> is the set of <r>-subsets of $\{1,2 \ldots n\}$, two of them being adjacent iff their intersection contains exactly <r>-1 elements.
(<Ref Label="JohnsonGraph"/>)
</Item>

<Item><C>KiteGraph</C><Br/> 
A diamond with a pendant vertex and maximum degree 3.
(<Ref Label="KiteGraph"/>)
</Item>

<Item><C>OctahedralGraph( <n> )</C><Br/> 
Returns the <(2n-2)>-regular graph on $2n$ vertices.
(<Ref Label="OctahedralGraph"/>)
</Item>

<Item><C>Octahedron</C><Br/> 
The 1-skeleton of Plato's octahedron.
(<Ref Label="Octahedron"/>)
</Item>

<Item><C>ParachuteGraph</C><Br/> 
Returns the suspension of a 4-path with a pendant vertex attached to the south pole.
(<Ref Label="ParachuteGraph"/>)
</Item>

<Item><C>ParapluieGraph</C><Br/> 
A 3-Fan graph with a 3-path attached to the universal vertex.
(<Ref Label="ParapluieGraph"/>)
</Item>

<Item><C>PathGraph( <n> )</C><Br/> 
Returns the path graph on <n> vertices.
(<Ref Label="PathGraph"/>)
</Item>

<Item><C>PawGraph</C><Br/> 
A triangle with a pendant vertex.
(<Ref Label="PawGraph"/>)
</Item>

<Item><C>PetersenGraph</C><Br/> 
The 3-regular graph on 10 vertices having girth 5.
(<Ref Label="PetersenGraph"/>)
</Item>

<Item><C>RandomCirculant( <n> )</C><Br/>
<C>RandomCirculant( <n>, <k>)</C><Br/>
<C>RandomCirculant( <n>, <p>)</C><Br/>
Returns a circulant on <n> vertices with its <jumps> selected randomly.
(<Ref Label="RandomCirculant"/>)
</Item>

<Item><C>RGraph</C><Br/> 
A  square  with  two  pendant  vertices attached to the same vertex of the square.
(<Ref Label="RGraph"/>)
</Item>

<Item><C>SnubDisphenoid</C><Br/> 
The 1-skeleton of the 84th Johnson solid.
(<Ref Label="SnubDisphenoid"/>)
</Item>

<Item><C>SpikyGraph( <n> )</C><Br/> 
Returns a complete on <n> vertices, with an additional complete on <n> vertices 
glued to each of its (<n>-1)-dimensional faces.
(<Ref Label="SpikyGraph"/>)
</Item>

<Item><C>SunGraph( <n> )</C><Br/> 
Returns a complete graph on <n> vertices with a zigzaging corona of 2<n> vertices 
glued to a <n>-cycle of the complete graph.
(<Ref Label="SunGraph"/>)
</Item>

<Item><C>Tetrahedron</C><Br/> 
The 1-skeleton of Plato's tetrahedron.
(<Ref Label="Tetrahedron"/>)
</Item>

<Item><C>TorusGraph( <n>, <m> )</C><Br/>
Returns (the underlying graph of) a triangulation of the torus on $n.m$ vertices.
(<Ref Label="TorusGraph"/>)
</Item>

<Item><C>TreeGraph( <arity>, <depth> )</C><Br/>
<C>TreeGraph( <ArityList> )</C><Br/>
Returns the tree, the connected cycle-free graph, specified by it parameters.
(<Ref Label="TreeGraph"/>)
</Item>

<Item><C>TrivialGraph</C><Br/> 
The one vertex graph.
(<Ref Label="TrivialGraph"/>)
</Item>

<Item><C>WheelGraph( <n> )</C><Br/> 
WheelGraph( <n>, <r> )</C><Br/> 
This  is  the   cone  of  an  <n>-cycle; when present <r> is the radius of the wheel.
(<Ref Label="WheelGraph"/>)
</Item>

</List>

  </Section>
  <Section Label="tsmallgraphs">
  <Heading>Small Graphs</Heading>
  
<List>

<Item><C>ConnectedGraphsOfGivenOrder( <n> )</C><Br/>
Returns the list of all connected graphs of order <n> (upto isomorphism).
(<Ref Label="ConnectedGraphsOfGivenOrder"/>)
</Item>

<Item><C>Graph6ToGraph( <String> )</C><Br/>
Returns the graph represented by <String> which is encoded using 
Brendan McKay's graph6 format. 
(<Ref Label="Graph6ToGraph"/>)
</Item>

<Item><C>GraphsOfGivenOrder( <n> )</C><Br/>
Returns the list of all graphs of order <n> (upto isomorphism). 
(<Ref Label="GraphsOfGivenOrder"/>)
</Item>

<Item><C>ImportGraph6( <Filename> )</C><Br/>
Returns the list of graphs represented in <Filename> which are encoded using 
Brendan McKay's graph6 format.
(<Ref Label="ImportGraph6"/>)
</Item>

<Item><C>HararyToMcKay( <Spec> )</C><Br/>
Returns the McKay's <index> of a Harary's graph specification <Spec>.
(<Ref Label="HararyToMcKay"/>)
</Item>

<Item><C>McKayToHarary( <index> )</C><Br/>
Returns the Harary's graph specification of a McKay's <index>.
(<Ref Label="McKayToHarary"/>)
</Item>

</List>

  </Section>
  <Section Label="tattributesandproperties">
  <Heading>Attributes and Properties</Heading>

<List>

<Item><C>Adjacencies( <G> )</C><Br/> 
Returns the list of adjacencies of <G>: The neighbors of vertex <x> are 
listed in position <x> of that list.
(<Ref Label="Adjacencies"/>)
</Item>

<Item><C>Adjacency( <G>, <x> )</C><Br/> 
Returns the list of vertices in <G> which are adjacent to vertex <x>.
(<Ref Label="Adjacency"/>)
</Item>

<Item><C>AdjMatrix( <G> )</C><Br/> 
Returns the Adjacency Matrix of <G>.
(<Ref Label="AdjMatrix"/>)
</Item>

<Item><C>AutGroupGraph( <G> )</C><Br/> 
Returns the automorphism group of graph <G>. A synonym is `AutomorphismGroup( <G> )'.
(<Ref Label="AutGroupGraph"/>)
</Item>

<Item><C>BoundaryVertices( <G> )</C><Br/>
Returns the list of vertices of <G> that have links isomorphic to a path. 
But it returns `fail' if <G> is not a compact surface.
(<Ref Label="BoundaryVertices"/>)
</Item>

<Item><C>ConnectedComponents( <G> )</C><Br/> 
Returns the equivalece partition of $V(G)$ corresponding to the equivalence 
relation <E>reachable</E> in <G>.
(<Ref Label="ConnectedComponents"/>)
</Item>

<Item><C>Diameter( <G> )</C><Br/> 
Returns the maximum among the distances between pairs of vertices of <G>.
(<Ref Label="Diameter"/>)
</Item>

<Item><C>Distance( <G>, <x>, <y> )</C><Br/> 
Returns the length of a minimal path connecting <x> to <y> in <G>.
(<Ref Label="Distance"/>)
</Item>

<Item><C>DistanceMatrix( <G> )</C><Br/> 
Returns an $n\times n$ matrix $D$, where $D[x][y]$ is the distance between <x> and <y> in <G>.
(<Ref Label="DistanceMatrix"/>)
</Item>

<Item><C>DistanceSet( <G>, <A>A</A>, <B> )</C><Br/> 
Returns the set of distances between pairs of vertices in $A\times B$.
(<Ref Label="DistanceSet"/>)
</Item>

<Item><C>Distances( <G>, <A>A</A>, <B> )</C><Br/> 
Returns the list of distances between pairs of vertices in $A\times B$.
(<Ref Label="Distances"/>)
</Item>

<Item><C>DominatedVertices( <G> )</C><Br/> 
Returns the set of dominated vertices of <G>.
(<Ref Label="DominatedVertices"/>)
</Item>

<Item><C>Eccentricity( <G>, <x> )</C><Br/> 
Returns  the  distance  from a vertex <x> in graph <G> to its most distant 
vertex in <G>.
(<Ref Label="Eccentricity"/>)
</Item>

<Item><C>Edges( <G> )</C><Br/> 
Returns the list of edges of graph <G>.
(<Ref Label="Edges"/>)
</Item>

<Item><C>Girth( <G> )</C><Br/>
Returns the length of the minimum induced cycle in <G>.
(<Ref Label="Girth"/>)
</Item>

<Item><C>GraphAttributeStatistics( <OrderList>, <ProbList>, <Attribute> )</C><Br/>
Returns statistics for graph attribute <Attribute>. 
(<Ref Label="GraphAttributeStatistics"/>)
</Item>

<Item><C>InteriorVertices( <G> )</C><Br/>
Returns the list of vertices of <G> that have links isomorphic to a cycle. 
But it returns `fail' if <G> is not a compact surface.
(<Ref Label="InteriorVertices"/>)
</Item>

<Item><C>IsCompactSurface( <G> )</C><Br/>
Returns `true' if every link of <G> is either an <n>-cycle, for $n\geq 4$ or 
an <m>-path, for $m\geq 2$; it returns `false' otherwise.
(<Ref Label="IsCompactSurface"/>)
</Item>

<Item><C>IsDiamondFree( <G> )</C><Br/> 
Returns `true' if <G> is free from induced diamonds, `false' otherwise.
(<Ref Label="IsDiamondFree"/>)
</Item>

<Item><C>IsEdge( <G> , <x>, <y> )</C><Br/> 
(<Ref Label="IsEdge"/>)
</Item>

<Item><C>IsEdge( <G> , [<x>,<y>] )</C><Br/> 
Returns `true' if `[<x>,<y>]' is an edge of <G>.
(<Ref Label="IsEdge"/>)
</Item>

<Item><C>IsLocallyConstant( <G> )</C><Br/>
Returns `true' if all the links of <G> are isomorphic to each other; `false' otherwise
(<Ref Label="IsLocallyConstant"/>)
</Item>

<Item><C>IsLocallyH( <G>, <H> )</C><Br/>
Returns `true' if all the links of <G> are isomorphic to <H>; `false' otherwise.
(<Ref Label="IsLocallyH"/>)
</Item>

<Item><C>IsLoopless(<G>)</C><Br/> 
Returns `true' when <G> is isomorphic to <H> and `false' otherwise.
(<Ref Label="IsLoopless"/>)
</Item>

<Item><C>IsOriented( <G> )</C><Br/> 
Returns `true' if whenever xy is an edge (arrow)  of <G>, yx is not.
(<Ref Label="IsOriented"/>)
</Item>

<Item><C>IsSimple( <G> )</C><Br/> 
Returns `true' if <G> contains no loops and no arrows.
(<Ref Label="IsSimple"/>)
</Item>

<Item><C>IsSurface( <G> )</C><Br/>
Returns `true' if every link of <G> is an <n>-cycle, for $n\geq 4$; `false' otherwise.
(<Ref Label="IsSurface"/>)
</Item>

<Item><C>IsUndirected(<G>)</C><Br/> 
Returns `true' if whenever xy is an edge (arrow) of <G>, yx is also an edge of <G>.
(<Ref Label="IsUndirected"/>)
</Item>

<Item><C>Link( <G>, <x> )</C><Br/> 
Returns the subgraph induced in <G> by the neighbors of <x>.
(<Ref Label="Link"/>)
</Item>

<Item><C>Links( <G> )</C><Br/> 
Returns  the  list  of  subgraphs  of <G> induced by the neighbors of each vertex of <G>.
(<Ref Label="Links"/>)
</Item>

<Item><C>MaxDegree( <G> )</C><Br/> 
Returns the maximum degree in graph <G>.
(<Ref Label="MaxDegree"/>)
</Item>

<Item><C>MinDegree( <G> )</C><Br/> 
Returns the minimum degree in graph <G>.
(<Ref Label="MinDegree"/>)
</Item>

<Item><C>NumberOfConnectedComponents( <G> )</C><Br/> 
Returns the number of connected components of <G>.
(<Ref Label="NumberOfConnectedComponents"/>)
</Item>

<Item><C>Order(<G>)</C><Br/> 
Returns the number of vertices, of graph <G>.
(<Ref Label="Order"/>)
</Item>

<Item><C>Radius( <G> )</C><Br/> 
Returns the minimal eccentricity among the vertices of graph <G>.
(<Ref Label="Radius"/>)
</Item>

<Item><C>Size(<G>)</C><Br/> 
Returns the number of edges of graph <G>.
(<Ref Label="Size"/>)
</Item>

<Item><C>SpanningForest( <G> )</C><Br/> 
Returns a spanning forest of <G>.
(<Ref Label="SpanningForest"/>)
</Item>

<Item><C>SpanningForestEdges( <G> )</C><Br/> 
Returns the edges of a spanning forest of <G>.
(<Ref Label="SpanningForestEdges"/>)
</Item>

<Item><C>VertexDegree( <G>, <x> )</C><Br/> 
Returns the degree of vertex <x> in Graph <G>.
(<Ref Label="VertexDegree"/>)
</Item>

<Item><C>VertexDegrees( <G> )</C><Br/> 
Returns the list of degrees of the vertices in graph <G>.
(<Ref Label="VertexDegrees"/>)
</Item>

<Item><C>VertexNames(<G>)</C><Br/> 
Returns  the  list of names of the vertices of <G>.
(<Ref Label="VertexNames"/>)
</Item>

<Item><C>Vertices( <G> )</C><Br/> 
Returns the list `[1..Order( <G> )]'.
(<Ref Label="Vertices"/>)
</Item>

</List>

  </Section>
  <Section Label="tunaryoperators">
  <Heading>Unary Operators</Heading>

<List>

<Item><C>ComplementGraph( <G> )</C><Br/> 
Returns the new graph <H> such that  $V(H)=V(G)$ and $xy\in E(H) \iff xy \not\in E(G)$.
(<Ref Label="ComplementGraph"/>)
</Item>

<Item><C>CompletelyParedGraph( <G> )</C><Br/> 
Returns the graph obtained from <G> by iteratively removing all dominated vertices. 
(<Ref Label="CompletelyParedGraph"/>)
</Item>

<Item><C>Cone( <G> )</C><Br/> 
Returns a new graph obtained from <G> by adding a new vertex which is adjacent to all vertices of <G>.
(<Ref Label="Cone"/>)
</Item>

<Item><C>CliqueGraph( <G> )</C><Br/>
(<Ref Label="CliqueGraph"/>)
</Item>

<Item><C>CliqueGraph( <G>, <maxNumCli> )</C><Br/> 
Returns the intersection graph of the (maximal) cliques of <G>; aborts if <maxNumCli> cliques are found.
(<Ref Label="CliqueGraph"/>)
</Item>

<Item><C>DistanceGraph( <G>, <Dist> )</C><Br/> 
Returns a new graph where two vertices are adjacent iff the distance between them belongd to <Dist>.
(<Ref Label="DistanceGraph"/>)
</Item>

<Item><C>InducedSubgraph( <G>, <V> )</C><Br/> 
Returns the subgraph of graph <G> induced by the vertex set <V>.
(<Ref Label="InducedSubgraph"/>)
</Item>

<Item><C>LineGraph( <G> )</C><Br/> 
Returns the intersection graph of the edges of <G>.
(<Ref Label="LineGraph"/>)
</Item>

<Item><C>ParedGraph( <G> )</C><Br/> 
Returns the induced subgraph obtained from   <G>  by  removing  its  dominated  vertices.
(<Ref Label="ParedGraph"/>)
</Item>

<Item><C>PowerGraph( <G>, <exp> )</C><Br/> 
Returns a new graph where two vertices are neighbors iff their distance in <G> is less than or equal to <exp>.
(<Ref Label="PowerGraph"/>)
</Item>

<Item><C>QuotientGraph( <G>, <Part> )</C><Br/> 
(<Ref Label="QuotientGraph"/>)
</Item>

<Item><C>QuotientGraph( <G>, <L1>, <L2> )</C><Br/> 
Returns the quotient graph of graph <G> given a vertex partition <Part>, by identifying any two vertices in the same part.
(<Ref Label="QuotientGraph"/>)
</Item>

<Item><C>Suspension( <G> )</C><Br/> 
Returns the graph obtained from  <G> by adding two new vertices which are adjacent to every vertex of <G> but not to each other.
(<Ref Label="Suspension"/>)
</Item>
</List>

  </Section>
  <Section Label="tbinaryoperators">
  <Heading>Binary Operators</Heading>

<List>

<Item><C>BoxProduct( <G>, <H> );</C><Br/> 
Returns the BoxProduct (or cartesian product) of graphs <G> and <H>.
(<Ref Label="BoxProduct"/>)
</Item>

<Item><C>BoxTimesProduct( <G>, <H> )</C><Br/> 
Returns the BoxTimesProduct (or strong product) of graphs <G> and <H>.
(<Ref Label="BoxTimesProduct"/>)
</Item>

<Item><C>Composition( <G>, <H> )</C><Br/> 
Returns the composition $G[H]$ of two graphs <G> and <H>.
(<Ref Label="Composition"/>)
</Item>

<Item><C>DisjointUnion( <G>, <H> )</C><Br/> 
Returns the disjoint union of two graphs <G> and <H>.
(<Ref Label="DisjointUnion"/>)
</Item>

<Item><C>GraphSum( <G>, <L> )</C><Br/> 
Returns the lexicographic sum of a list of graphs <L> over a graph <G>.
(<Ref Label="GraphSum"/>)
</Item>

<Item><C>Join( <G>, <H> )</C><Br/> 
Returns the disjoint union of <G> and <H> with all the possible edges between <G> and <H> added.
(<Ref Label="Join"/>)
</Item>

<Item><C>TimesProduct( <G>, <H> )</C><Br/> 
Returns  the  times  product (tensor product) $G  \times  H$ of two graphs <G> and <H>.
(<Ref Label="TimesProduct"/>)
</Item>

</List>

  </Section>
  <Section Label="tcliques">
  <Heading>Cliques</Heading>

<P/>Functions dealing with cliques.

<List>

<Item><C>Basement( <A>G</A>, <A>KnG</A>, <A>x</A> )</C><Br/>
<C>Basement( <A>G</A>, <A>KnG</A>, <A>V</A> )</C><Br/>
Returns the basement of vertex <A>x</A> (vertex set <A>V</A>) of the iterated 
clique graph <A>KnG</A> with respect to <A>G</A>.
(<Ref Label="Basement"/>)
</Item>

<Item><C>CliqueGraph( <A>G</A> )</C><Br/> 
<C>CliqueGraph( <A>G</A>, <A>maxNumCli</A> )</C><Br/>  
Returns the intersection graph of the (maximal) cliques of <A>G</A>; 
aborts if <A>maxNumCli</A> cliques are found.
(<Ref Label="CliqueGraph"/>)
</Item>

<Item><C>CliqueNumber( <A>G</A> )</C><Br/>  
Returns the order, <M>\omega(G)</M>, of a maximum clique of <A>G</A>. 
(<Ref Label="CliqueNumber"/>)
</Item>

<Item><C>Cliques( <A>G</A> )</C><Br/>  
<C>Cliques( <A>G</A>, <A>maxNumCli</A> )</C><Br/>  
Returns the list of (maximal) cliques of <A>G</A>; aborts if <A>maxNumCli</A> 
cliques are found. 
(<Ref Label="Cliques"/>)
</Item>

<Item><C>CompletesOfGivenOrder( <A>G</A>, <A>ord</A> )</C><Br/>  
Returns the list of vertex sets of all complete subgraphs 
of order <A>ord</A> of <A>G</A>. 
(<Ref Label="CompletesOfGivenOrder"/>)
</Item>

<Item><C>IsCliqueGated( <A>G</A> )</C><Br/>  
Returns `true' if <A>G</A> is a clique gated graph. 
(<Ref Label="IsCliqueGated"/>)
</Item>

<Item><C>IsCliqueHelly( <A>G</A> )</C><Br/>  
Returns  `true'  if  the  set of (maximal) cliques <A>G</A> satisfy the 
<E>Helly</E> property. 
(<Ref Label="IsCliqueHelly"/>)
</Item>

<Item><C>IsComplete( <A>G</A>, <A>L</A> )</C><Br/>  
Returns `true' if <A>L</A> induces a complete subgraph of <A>G</A>.
(<Ref Label="IsComplete"/>)
</Item>

<Item><C>IsCompleteGraph( <A>G</A> )</C><Br/>  
Returns  `true'  if graph <A>G</A> is a complete graph, `false' otherwise.
(<Ref Label="IsCompleteGraph"/>)
</Item>

<Item><C>NumberOfCliques( <A>G</A> )</C>  <Br/>
<C>NumberOfCliques( <A>G</A>, <A>maxNumCli</A> )</C>  <Br/>
Returns  the  number of (maximal) cliques of <A>G</A>.
(<Ref Label="NumberOfCliques"/>)
</Item>

</List>

  </Section>
  <Section Label="tmorphismsansisomorphisms">
  <Heading>Morphisms and Isomorphisms</Heading>

<List>

<Item><C>IsIsomorphicGraph( <G>, <H> )</C><Br/> 
Returns `true' when <G> is isomorphic to <H> and `false' otherwise.
(<Ref Label="IsIsomorphicGraph"/>)
</Item>

<Item><C>IsoMorphism( <G>, <H> )</C><Br/> 
Returns one isomorphism from <G> to <H>; `fail' if there is none.
(<Ref Label="IsoMorphism"/>)
</Item>

<Item><C>IsoMorphisms( <G>, <H> )</C><Br/> 
Returns  the  list  of  all  isomorphism  from  <G> to <H>.
(<Ref Label="IsoMorphisms"/>)
</Item>

<Item><C>NextIsoMorphism( <G>, <H>, <F> )</C><Br/> 
Returns the next isomorphism  (after <F>) from <G> to <H>.
(<Ref Label="NextIsoMorphism"/>)
</Item>

<Item><C>NextPropertyMorphism( <G>, <H>, <F>, <PropList> )</C><Br/> 
Returns the next morphism (after <F>) from <G> to <H> satisfying  the  list  of  properties  <PropList>.
(<Ref Label="NextPropertyMorphism"/>)
</Item>

<Item><C>PropertyMorphism( <G>, <H>, <PropList> )</C><Br/> 
Returns  the  first  morphism from <G> to <H> satisfying the list of properties <PropList>.
(<Ref Label="PropertyMorphism"/>)
</Item>

<Item><C>PropertyMorphisms( <G>, <H>, <PropList> )</C><Br/> 
Returns all morphisms from <G> to <H> satisfying the list of properties <PropList>.
(<Ref Label="PropertyMorphisms"/>)
</Item>

</List>

  </Section>
  <Section Label="tgraphcategories">
  <Heading>Graphs Categories</Heading>

<List>

<Item><C>CopyGraph( <G> ) </C><Br/> 
Returns a fresh copy of <G>. Useful to change the category of a graph.
(<Ref Label="CopyGraph"/>)
</Item>

<Item><C>GraphCategory( [ <G>, ... ] );</C><Br/> 
For internal use. Returns the minimal common category to a list of graphs.
(<Ref Label="GraphCategory"/>)
</Item>

<Item><C>Graphs()</C><Br/> 
The category of all  graphs  that  can  be  represented in YAGS.
(<Ref Label="Graphs"/>)
</Item>

<Item><C>in(<G>,<Catgy>)</C><Br/> 
Returns  `true'  if  graph  <G>  belongs  to  category <Catgy> and `false' otherwise.
(<Ref Label="in"/>)
</Item>

<Item><C>LooplessGraphs()</C><Br/> 
The category of all graph that may contain arrows and edges but no loops.
(<Ref Label="LooplessGraphs"/>)
</Item>

<Item><C>OrientedGraphs()</C><Br/> 
The category of all graphs that may contain arrows but no edges or loops.
(<Ref Label="OrientedGraphs"/>)
</Item>

<Item><C>SetDefaultGraphCategory( <Catgy> )</C><Br/> 
Sets  the default graph category to <Catgy>.
(<Ref Label="SetDefaultGraphCategory"/>)
</Item>

<Item><C>SimpleGraphs()</C><Br/> 
The category of all graphs which may contain edges but no arrows or loops. 
(<Ref Label="SimpleGraphs"/>)
</Item>

<Item><C>TargetGraphCategory( [ <G>, ... ] );</C><Br/> 
For internal use. Within YAGS methods, returns the graph category to which the new graph will belong.
(<Ref Label="TargetGraphCategory"/>)
</Item>

<Item><C>UndirectedGraphs()</C><Br/> 
The category of all graphs that may contain loops and edges but no arrows.
(<Ref Label="UndirectedGraphs"/>)
</Item>

</List>

  </Section>
  <Section Label="tdigraphs">
  <Heading>Digraphs</Heading>

<List>

<Item><C>InNeigh( <G>, <x> )</C><Br/> 
Returns the list of in-neighbors of <x> in <G>.
(<Ref Label="IsTournament"/>)
</Item>

<Item><C>IsTournament( <G> )</C><Br/> 
Returns `true' if <G> contains no loops or edges but only arrows and it is maximal w.r.t. this property.
(<Ref Label="IsTournament"/>)
</Item>

<Item><C>IsTransitiveTournament( <G> )</C><Br/> 
Returns `true' if <G> is a Tournament and whenever $xy$ and $yz$ are arrows, then $xz$ is an arrow too.
(<Ref Label="IsTransitiveTournament"/>)
</Item>

<Item><C>Orientations( <G> )</C><Br/>
Returns the list of all the oriented graphs that are obtained from <G>
by replacing each edge by one arrow. 
(<Ref Label="Orientations"/>)
</Item>

<Item><C>OutNeigh( <G>, <x> )</C><Br/> 
Returns the list of out-neighbors of <x> in <G>.
(<Ref Label="OutNeigh"/>)
</Item>

<Item><C>PaleyTournament( <prime> )</C><Br/>
Returns the Paley tournament associated with prime number <prime>.
(<Ref Label="PaleyTournament"/>)
</Item>

</List>

  </Section>
  <Section Label="tgroupsandrings">
  <Heading>Groups and Rings</Heading>

<List>

<Item><C>CayleyGraph( <Grp> )</C><Br/> 
<C>CayleyGraph( <Grp>, <Elms> )</C><Br/> 
Returns the CayleyGraph of group <Grp>.
(<Ref Label="CayleyGraph"/>)
</Item>

<Item><C>Circulant( <n>, <Jumps> )</C><Br/> 
Returns minimal $(1, 2, ..., n)$-invariant graph where vertex 1 is adjacent to vertices in <Jumps>.
(<Ref Label="Circulant"/>)
</Item>

<Item><C>GroupGraph( <G>, <Grp> )</C><Br/> 
<C>GroupGraph( <G>, <Grp>, <Act> )</C><Br/> 
Returns the minimal <Grp>-invariant (under the action <Act>) graph containing <G>.
(<Ref Label="GroupGraph"/>)
</Item>

<Item><C>QuadraticRingGraph( <Rng> )</C><Br/> 
Returns a graph <H> whose vertices are the elements of the ring <Rng> and $xy\in E(H) \iff x+z^2=y$ for some z in <Rng>.
(<Ref Label="QuadraticRingGraph"/>)
</Item>

<Item><C>RingGraph( <Rng>, <Elms> )</C><Br/> 
Returns  the  graph  G  whose  vertices are the elements of the ring <Rng>
such that x is adjacent to y iff x+r=y for some r in <Elms>.
(<Ref Label="RingGraph"/>)
</Item>

<Item><C>UnitsRingGraph( <Rng> )</C><Br/> 
Returns  the graph G whose vertices are the elements of <Rng>  such that x
is adjacent to y iff x+z=y for some unit z of <Rng>.
(<Ref Label="UnitsRingGraph"/>)
</Item>

</List>

  </Section>
  <Section Label="tbacktracking">
  <Heading>Backtracking</Heading>

<List>

<Item><C>BackTrack( <L>, <Opts>, <Chk>, <Done>, <Extra> )</C><Br/> 
Returns the next solution (after <L>) to a backtracking combinatorial problem 
specified by its parameters.
(<Ref Label="BackTrack"/>)
</Item>

<Item><C>BackTrackBag( <Opts>, <Chk>, <Done>, <Extra> )</C><Br/> 
Returns the list of all solutions to a backtracking combinatorial problem specified by its parameters.
(<Ref Label="BackTrackBag"/>)
</Item>

</List>

  </Section>
  <Section Label="tmiscellaneous">
  <Heading>Miscellaneous</Heading>

<List>

<Item><C>DumpObject( <Obj> )</C><Br/> 
For internal use. Dumps  all information available for object <Obj>.
(<Ref Label="DumpObject"/>)
</Item>

<Item><C>EasyExec( <Dir>, <ProgName>, <InString> )</C><Br/> 
(<Ref Label="EasyExec"/>)
</Item>

<Item><C>EasyExec( <ProgName>, <InString> )</C><Br/> 
Calls the external program <ProgName> with input string <InString>; returns the output string.
(<Ref Label="EasyExec"/>)
</Item>

<Item><C>EquivalenceRepresentatives( <L>, <Eqiv> )</C><Br/>
Returns a sublist of <L>, which is a complete list of representatives of 
<L> under the equivalent relation <Equiv>.
(<Ref Label="EquivalenceRepresentatives"/>)
</Item>

<Item><C>IsBoolean( <Obj> )</C><Br/> 
Returns `true' if object <Obj> is `true' or `false' and `false' otherwise.
(<Ref Label="IsBoolean"/>)
</Item>

<Item><C>QtfyIsSimple( <G> )</C><Br/> 
For internal use. Returns how far is graph <G> from being simple.
(<Ref Label="QtfyIsSimple"/>)
</Item>

<Item><C>RandomlyPermuted( <Obj> )</C><Br/> 
Returns  a copy of <Obj> with the order of its elements permuted randomly.
(<Ref Label="RandomlyPermuted"/>)
</Item>

<Item><C>RandomPermutation( <n> )</C><Br/> 
Returns a random permutation of the list `[1,2, ..., <n>]'.
(<Ref Label="RandomPermutation"/>)
</Item>

<Item><C>RandomSubset( <Set> )</C><Br/>
(<Ref Label="RandomSubset"/>)
</Item>

<Item><C>RandomSubset( <Set>, <k> )</C><Br/>
(<Ref Label="RandomSubset"/>)
</Item>

<Item><C>RandomSubset( <Set>, <p> )</C><Br/>
Returns a random subset of the set <Set>. It also works for lists though.
(<Ref Label="RandomSubset"/>)
</Item>

<Item><C>TimeInSeconds()</C><Br/> 
Returns the time in seconds since 1970-01-01 00:00:00 UTC as an integer.
(<Ref Label="TimeInSeconds"/>)
</Item>

<Item><C>UFFind( <UFS>, <x> )</C><Br/> 
For  internal  use.  Implements  the  <find>  operation on the <union-find structure>. 
(<Ref Label="UFFind"/>)
</Item>

<Item><C>UFUnite( <UFS>, <x>, <y> )</C><Br/> 
For  internal  use.  Implements  the  <unite> operation on the <union-find structure>.
(<Ref Label="UFUnite"/>)
</Item>

<Item><C>YAGSExec( <ProgName>, <InString> )</C><Br/> 
For  internal  use.  Calls  external  program  <ProgName> located in directory
'<YAGSDir>/bin/'  feeding  it with <InString> as input and returning  the
output  of  the  external  program  as a string.
(<Ref Label="YAGSExec"/>)
</Item>

</List>

  </Section>
  <Section Label="tundocumented">
  <Heading>Undocumented</Heading>

<List>

<Item><C>DeclareQtfyProperty( <Name>, <Filter> )</C><Br/> 
For internal use. Declare a quantifiable property.
(<Ref Label="DeclareQtfyProperty"/>)
</Item>

<Item><C>DumpObject( <Obj> )</C><Br/> 
For internal use. Dumps  all information available for object <Obj>.
(<Ref Label="DumpObject"/>)
</Item>

<Item><C>EasyExec( <Dir>, <ProgName>, <InString> )</C><Br/> 
<C>EasyExec( <ProgName>, <InString> )</C><Br/> 
Calls the external program <ProgName> with input string <InString>; returns the output string.
(<Ref Label="EasyExec"/>)
</Item>

<Item><C>GraphToRaw( <FileName>, <G> )</C><Br/> 
Writes the graph <G> in raw format to the file  <FileName>.
(<Ref Label="GraphToRaw"/>)
</Item>

<Item><C>GraphUpdateFromRaw( <FileName>, <G> )</C><Br/> 
Updates  the  coordinates  of  <G>  from  a file <FileName> in raw format.
(<Ref Label="GraphUpdateFromRaw"/>)
</Item>

<Item><C>QtfyIsSimple( <G> )</C><Br/> 
For internal use. Returns how far is graph <G> from being simple.
(<Ref Label="QtfyIsSimple"/>)
</Item>

<Item><C>YAGSExec( <ProgName>, <InString> )</C><Br/> 
For  internal  use.  Calls  external  program  <ProgName> located in directory
'<YAGSDir>/bin/'  feeding  it with <InString> as input and returning  the
output  of  the  external  program  as a string.
(<Ref Label="YAGSExec"/>)
</Item>

</List>

</Section>
