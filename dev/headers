algebraic.gd:#O  GroupGraph( <G>, <Grp>, <act> )
algebraic.gd:#O  GroupGraph( <G>, <Grp> )
algebraic.gd:#O  CayleyGraph( <Grp>, <elms> )
algebraic.gd:#O  CayleyGraph( <Grp> )
algebraic.gd:#O  RingGraph( <Rng>, <elms> )
algebraic.gd:#O  Circulant( <n>, <jumps> )
algebraic.gd:#O  CuadraticRingGraph( <Rng> )
algebraic.gd:#O  UnitsRingGraph( <Rng> )
backtrack.gd:#O  BackTrack( <L>, <opts>, <chk>, <done>, <extra> )
backtrack.gd:#O  BackTrackBag( <opts>, <chk>, <done>, <extra> )
basics.gd:#F  IsBoolean( <O> )
basics.gd:#O  DumpObject( <O> )
basics.gd:#F  DeclareQtfyProperty( <Name>, <Filter> )
basics.gd:#F  UFFind( <UFS>, <x> )
basics.gd:#F  UFUnite( <UFS>, <x>, <y> )
basics.gd:#O  RandomlyPermuted( <Obj> )
basics.gd:#O  RandomPermutation( <N> )
binaryop.gd:#O  BoxProduct( <G>, <H> );
binaryop.gd:#O  TimesProduct( <G>, <H> )
binaryop.gd:#O  BoxTimesProduct( <G>, <H> )
binaryop.gd:#O  DisjointUnion( <G>, <H> )
binaryop.gd:#O  Join( <G>, <H> )
binaryop.gd:#O  GraphSum( <G>, <L> )
binaryop.gd:#O  Composition( <G>, <H> )
classes.gd:#P  IsDiamondFree( <G> )
cliques.gd:#A  CliqueNumber( <G> )  
cliques.gd:#P  IsCliqueHelly( <G> )
cliques.gd:#A  CliqueGraph( <G> )
cliques.gd:#O  CliqueGraph( <G>, <m> )
cliques.gd:#A  Cliques( <G> )
cliques.gd:#O  Cliques( <G>, <m> )
cliques.gd:#A  NumberOfCliques( <G> )
cliques.gd:#O  NumberOfCliques( <G>, <m> )
cliques.gd:#O  Basement( <G>, <KnG>, <x> )
cliques.gd:#O  Basement( <G>, <KnG>, <V> )
cliques.gd:#O  CompletesOfGivenOrder( <G>, <o> )
cliques.gd:#P  IsCliqueGated( <G> )
digraphs.gd:#O  InNeigh( <G>, <x> )
digraphs.gd:#O  OutNeigh( <G>, <x> )
digraphs.gd:#P  IsTournament( <G> )
digraphs.gd:#P  IsTransitiveTournament( <G> )
distances.gd:#A  DistanceMatrix( <G> )
distances.gd:#A  Diameter( <G> )
distances.gd:#A  Radius( <G> )
distances.gd:#O  Distance( <G>, <x>, <y> )
distances.gd:#O  Distances( <G>, <A>, <B> )
distances.gd:#O  DistanceSet( <G>, <A>, <B> )
distances.gd:#O  DistanceGraph( <G>, <D> )
distances.gd:#O  PowerGraph( <G>, <e> )
distances.gd:#F  Eccentricity( <G>, <x> )
draw.gd:#O  SetCoordinates( <G>, <Coord> ) 
draw.gd:#O  Coordinates( <G> )
draw.gd:#O  GraphToRaw( <filename>, <G> )
draw.gd:#O  GraphUpdateFromRaw( <filename>, <G> )
draw.gd:#O  Draw( <G> )
exec.gd:#O  EasyExec( <dir>, <progname>, <instring> )
exec.gd:#O  EasyExec( <progname>, <instring> )
exec.gd:#O  YagsExec( <progname>, <instring> )
exec.gd:#O  TimeInSeconds()
families.gd:#F  DiscreteGraph( <n> )
families.gd:#F  CompleteGraph( <n> )
families.gd:#F  PathGraph( <n> )
families.gd:#F  CycleGraph( <n> )
families.gd:#F  CubeGraph( <n> )
families.gd:#F  OctahedralGraph( <n> )
families.gd:#F  JohnsonGraph( <n>, <r> )
families.gd:#F  CompleteBipartiteGraph( <n>, <m> )
families.gd:#F  CompleteMultipartiteGraph( <n1>, <n2> [, <n3> ...] )
families.gd:#F  RandomGraph( <n>, <p> )
families.gd:#F  RandomGraph( <n> )
families.gd:#F  CylinderGraph( <Base>, <Height> )
families.gd:#O  WheelGraph( <N> )
families.gd:#O  WheelGraph( <N>, <Radius> )
families.gd:#F  FanGraph( <N> )
families.gd:#F  SunGraph( <N> )
families.gd:#F  SpikyGraph( <N> )
families.gd:#V  TrivialGraph
families.gd:#V  DiamondGraph
families.gd:#V  ClawGraph
families.gd:#V  PawGraph
families.gd:#V  HouseGraph
families.gd:#V  BullGraph
families.gd:#V  AntennaGraph
families.gd:#V  KiteGraph
families.gd:#V  DartGraph
families.gd:#V  ChairGraph
families.gd:#V  GemGraph
families.gd:#V  AGraph
families.gd:#V  DominoGraph
families.gd:#V  ParapluieGraph
families.gd:#V  ParachuteGraph
families.gd:#V  FishGraph
families.gd:#V  RGraph
families.gd:#V  Tetrahedron
families.gd:#V  Octahedron
families.gd:#V  Cube
families.gd:#V  Icosahedron
families.gd:#V  Dodecahedron
families.gd:#V  SnubDisphenoid
families.gd:#V  PetersenGraph
iso.gd:#O  IsoMorphism( <G>, <H> )
iso.gd:#O  NextIsoMorphism( <G>, <H>, <f> );
iso.gd:#O  IsoMorphisms( <G>, <H> )
iso.gd:#O  IsIsomorphicGraph( <G>, <H> )
kernel.gd:#C  Graphs()
kernel.gd:#C  LooplessGraphs()
kernel.gd:#C  UndirectedGraphs()
kernel.gd:#C  OrientedGraphs()
kernel.gd:#C  SimpleGraphs()
kernel.gd:#F  SetDefaultGraphCategory( <C> )
kernel.gd:#F  GraphCategory( [<G>, ... ] );
kernel.gd:#F  TargetGraphCategory( [<G>, ... ] );
kernel.gd:#O  in(<G>,<C>)
kernel.gd:#A  AdjMatrix(<G>)
kernel.gd:#A  Order(<G>)
kernel.gd:#A  Size(<G>)
kernel.gd:#A  VertexNames(<G>)
kernel.gd:#P  IsCompleteGraph(<G>)
kernel.gd:#P  IsLoopless(<G>)
kernel.gd:#P  IsUndirected(<G>)
kernel.gd:#Q  IsOriented(<G>)
kernel.gd:#P  IsSimple(<G>)
kernel.gd:#A  QtfyIsSimple( <G> )
kernel.gd:#O  IsComplete( <G>, <L> )
kernel.gd:#O  Vertices( <G> )
kernel.gd:#O  IsEdge( <G> , [x,y])
kernel.gd:#O  Adjacency( <G>, <v> )
kernel.gd:#O  Adjacencies( <G> )
kernel.gd:#O  VertexDegree( <G>, <v> )
kernel.gd:#O  VertexDegrees( <G> )
kernel.gd:#O  MaxDegree( <G> )
kernel.gd:#O  MinDegree( <G> )
kernel.gd:#O  Edges( <G> )
kernel.gd:#O  Graph( <R> )
kernel.gd:#F  GraphByAdjMatrix( <M> )
kernel.gd:#F  GraphByAdjacencies( <A> )
kernel.gd:#F  GraphByCompleteCover( <C> )
kernel.gd:#F  GraphByRelation( <V>, <R> )
kernel.gd:#F  GraphByRelation( <N>, <R> )
kernel.gd:#F  GraphByWalks( <walk1>, <walk2>,...)
kernel.gd:#F  GraphByEdges( <L> )
kernel.gd:#F  IntersectionGraph( <L> )
kernel.gd:#O  CopyGraph( <G> ) 
kernel.gd:#O  InducedSubgraph( <G>, <V> )
kernel.gd:#O  AddVerticesByAdjacencies( <G>, <NewAdjList> )
kernel.gd:#O  RemoveVertices( <G>, <V> )
kernel.gd:#O  AddEdges( <G>, <E> )
kernel.gd:#O  RemoveEdges( <G>, <E> )
kernel.gd:#A  ConnectedComponents( <G> )
kernel.gd:#A  NumberOfConnectedComponents( <G> )
kernel.gd:#O  SpanningForestEdges( <G> )
kernel.gd:#O  SpanningForest( <G> )
kernel.gd:#O  Link( <G>, <x> )
kernel.gd:#A  Links( <G> )
kernel.gd:#A  DominatedVertices( <G> )
morph.gd:#O  NextPropertyMorphism( <G1>, <G2>, <m>, <c> )
morph.gd:#O  PropertyMorphism( <G1>, <G2>, <c> )
morph.gd:#O  PropertyMorphisms( <G1>, <G2>, <c> )
unaryop.gd:#O  LineGraph( <G> )
unaryop.gd:#A  ComplementGraph( <G> )
unaryop.gd:#O  QuotientGraph( <G>, <P> )
unaryop.gd:#O  QuotientGraph( <G>, <L1>, <L2> )
unaryop.gd:#O  Cone( <G> )
unaryop.gd:#O  Suspension( <G> )
unaryop.gd:#O  ParedGraph( <G> )
unaryop.gd:#O  CompletelyParedGraph( <G> )
