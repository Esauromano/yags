  
  [1X6 [33X[0;0YBacktracking[133X[101X
  
  [33X[0;0YBacktracking  is  an  algorithmic  technique  for searching in combinatorial
  spaces.  In  this  chapter  we  describe  the  technique  and the facilities
  provided by [5XYAGS[105X to aid in the rapid prototyping of backtracking algorithms.
  This  chapter  is  written  for  the non-expert programmer, which is who can
  benefit the most from these facilities.[133X
  
  [33X[0;0YWhile  the expert programmer will not have any problem designing her/his own
  backtracking  algorithms,  she/he  can still benefit from [5XYAGS[105X's bactracking
  facilities   since   it   may  still  faster  to  implemet/test/prototype  a
  backtracking  algorithm  using  [5XYAGS[105X's  facilities.  A  minimal example (for
  computing derangements) can be found in [2XBackTrack[102X ([14XB.1-10[114X).[133X
  
  [33X[0;0YThe kind of combinatorial problems that can be addressed by backtracking are
  those that can be represented by a decision tree, and these include problems
  where  we  want to find: morphisms, isomorphisms, cages, colorings, cliques,
  hamiltonian   cycles,   walks,   paths,   subgraphs,  and  much  much  more.
  Combinatorial  problems that can be represented by a decision tree are truly
  everywhere.[133X
  
  [33X[0;0YAs  a  concrete  example,  consider  the  graph coloring problem: You have [22Xk[122X
  colors  [22X{C_1,  C_2,  ...,  C_k}[122X  and a graph [22XG[122X and you want to color all the
  vertices  of  a  graph  in such a way that no two adjacent vertices have the
  same  color.  How  would  you  proceed?  Well, probably, you would pick some
  random  color  [22XC_1[122X  ****  decision  tree,  code, efficency (the problem, the
  code), improvements, code. **otro ejemplo?[133X
  
  
  [1X6.1 [33X[0;0YA Simple Example[133X[101X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xchk:=function(L,extra)[127X[104X
    [4X[25X>[125X [27Xlocal x,y,x1,y1;[127X[104X
    [4X[25X>[125X [27Xx:=Length(L);y:=L[x];[127X[104X
    [4X[25X>[125X [27Xfor x1 in [1..x-1] do[127X[104X
    [4X[25X>[125X [27X  y1:=L[x1];[127X[104X
    [4X[25X>[125X [27X  if y=y1 then return false; fi;[127X[104X
    [4X[25X>[125X [27X  if x-y = x1-y1 then return false; fi;[127X[104X
    [4X[25X>[125X [27X  if x+y = x1+y1 then return false; fi;[127X[104X
    [4X[25X>[125X [27Xod;[127X[104X
    [4X[25X>[125X [27Xreturn true;[127X[104X
    [4X[25X>[125X [27Xend;[127X[104X
    [4X[28Xfunction( L, extra ) ... end[128X[104X
    [4X[25Xgap>[125X [27XBackTrackBag([1..8],chk,8,0);[127X[104X
    [4X[28X[ [ 1, 5, 8, 6, 3, 7, 2, 4 ], [ 1, 6, 8, 3, 7, 4, 2, 5 ], [128X[104X
    [4X[28X  [ 1, 7, 4, 6, 8, 2, 5, 3 ], [ 1, 7, 5, 8, 2, 4, 6, 3 ], [128X[104X
    [4X[28X  [ 2, 4, 6, 8, 3, 1, 7, 5 ], [ 2, 5, 7, 1, 3, 8, 6, 4 ],[128X[104X
    [4X[28X  --- many more line here ---[128X[104X
    [4X[28X  [ 7, 4, 2, 8, 6, 1, 3, 5 ], [ 7, 5, 3, 1, 6, 8, 2, 4 ], [128X[104X
    [4X[28X  [ 8, 2, 4, 1, 7, 5, 3, 6 ], [ 8, 2, 5, 3, 1, 7, 4, 6 ], [128X[104X
    [4X[28X  [ 8, 3, 1, 6, 2, 5, 7, 4 ], [ 8, 4, 1, 3, 6, 2, 7, 5 ] ][128X[104X
  [4X[32X[104X
  
  
  [1X6.2 [33X[0;0YHow Does it Work?[133X[101X
  
  
  [1X6.3 [33X[0;0YBacktracking in Depth[133X[101X
  
