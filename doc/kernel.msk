\Chapter{Kernel}

The kernel contains definitions and the core functions that handle
graphs.

\Section{Categories}

Using {\GAP} category facilities \YAGS \ defines a hierarchy of
graphs. The categories defined are as follows.

\Declaration{Graphs}

Among them we can find:

$$
\xymatrix{
   {\bullet} \ar@(dr,dl)[d] \ar[dr] \\
   {\bullet} \ar@(ul,ur)[u] \ar[r] & {\bullet}
} 
\ 
\xymatrix{
   {\bullet} \ar@{-}[dr] & {\bullet} \ar[dl]\\
   {\bullet} & {\bullet} \ar@(ur,dr)[]\ar[l]
} 
$$
$$
\xymatrix{
   {\bullet} \ar@(ul,dl)[] \ar[dr] & & {\bullet} \ar@(l,d)[dl]\\
   & {\bullet} \ar@(r,u)[ur] & 
} 
\xymatrix{
   & {\bullet} \ar@{-}[dl] \ar@{-}[dr] & & {\bullet} \ar@{-}[dl] \\
   {\bullet} & & {\bullet} \ar@{-}[dr] \\
   & {\bullet} \ar@{-}[ur] \ar@{-}[ul] & & {\bullet} \ar@{-}[uu] \\
}
$$

\Declaration{LooplessGraphs}

A loop is an arrow that starts and finishes on the same
vertex. 

$$
\xymatrix{
   {\bullet} \ar@(ur,dr)[]
} 
$$

Loopless graphs have no such arrows.

$$
\xymatrix{
   {\bullet} \ar[dr] & & {\bullet} \ar@(l,d)[dl]\\
   & {\bullet} \ar@(r,u)[ur] & 
} 
$$

\Declaration{UndirectedGraphs}

Given two vertex $i,j$ in graph $G$ we will say that graph $G$ has an
*edge* $\{i,j\}$ if there is an arrow $(i,j)$ and and arrow $(j,i).$ 

$$
\xymatrix{
   {\bullet} \ar@(ur,dr)[r] & {\bullet} \ar@(dl,ul)[l]
} 
\xymatrix{
   {\bullet} \ar@{-}[r] &  {\bullet}
} 
$$

Undirected graphs have no arrows but only edges.

$$
\xymatrix{
   {\bullet} \ar@(ul,dl)[] \ar@(r,d)[dr] & & {\bullet} \ar@(l,d)[dl]\\
   & {\bullet} \ar@(r,u)[ur] \ar@(l,u)[ul] & 
} 
\equiv\hskip20pt
\xymatrix{
   {\bullet} \ar@(ul,dl){-} \ar@{-}[dr] & & {\bullet} \ar@{-}[dl]\\
   & {\bullet} & 
}  
$$

\Declaration{OrientedGraphs}

Oriented graphs have no edges but only arrows. 

$$
\xymatrix{
   {\bullet} \ar[dr] & & {\bullet} \ar[ll]\\
   & {\bullet} \ar[ur] & 
} 
$$

\Declaration{SimpleGraphs}
$$
\xymatrix{
   & {\bullet} \ar@{-}[dl] \ar@{-}[dr] & & {\bullet} \ar@{-}[dl] \\
   {\bullet} & & {\bullet} \ar@{-}[dr] \\
   & {\bullet} \ar@{-}[ur] \ar@{-}[ul] & & {\bullet} \ar@{-}[uu] \\
}
$$

Figure shows the relationship among categories.

$$
\pstree[nodesep=5pt]{\Tr{Graphs}}
{
  \pstree{\Tr{Loopless}}
  {
         \Tr{Oriented}
         \Tr[name=S]{Simple Graphs}
  }
  \Tr[name=U]{Undirected}
}
\ncline[nodesep=5pt]{S}{U}
$$

This relationship is important because when a graph is created it is
normalized in the category it belongs. For instance, if we create a
graph such as 
$$
\xymatrix{
   {\bullet} \ar[dr] & & {\bullet} \ar[ll]\\
   & {\bullet} \ar[ur] & 
}
$$
as a simple graph \YAGS\  will normalize the graph as
$$
\xymatrix{
   {\bullet} \ar@{-}[dr] & & {\bullet} \ar@{-}[ll]\\
   & {\bullet} \ar@{-}[ur] & 
}
$$
For further examples see the following section.


\Section{Default Category}

There are several means to specify the category in which a new graph
will be created. There exists a <DefaultCategory> which tells \YAGS\  to
which category belongs any new graph by default. The <DefaultCategory> can be
changed using the following function.

\Declaration{SetDefaultGraphCategory}

In order to handle graphs with different categories there two
functions available.

\Declaration{GraphCategory}

\Declaration{TargetGraphCategory}

Finally we can test if a single graph belongs to a given category.

\Declaration{in}

\Section{Atributes and properties of graphs}

The following are functions to obtain atributes and properties of
graphs.

\Declaration{AdjMatrix}
\Declaration{Order}
\Declaration{Size}
\Declaration{VertexNames}
\Declaration{IsCompleteGraph}
\Declaration{IsLoopless}
\Declaration{IsUndirected}
\Declaration{IsOriented}

\Section{Information about graphs}

The following functions give information regarding graphs.

\Declaration{IsSimple}
\Declaration{QtfyIsSimple}
\Declaration{Adjacency}
\Declaration{Adjacencies}
\Declaration{VertexDegree}
\Declaration{VertexDegrees}
\Declaration{Edges}

\Section{Creating graphs}

The following functions create new graphs from a variety of sources.

\Declaration{Graph}
\Declaration{AdjMatrixGraph}
\Declaration{AdjacencyGraph}
\Declaration{CompleteCoverGraph}
\Declaration{RelationGraph}
\Declaration{IntersectionGraph}

The following functions create graphs from existing graphs

\Declaration{CopyGraph}
\Declaration{InducedSubgraph}
\Declaration{RemoveVertices}
\Declaration{AddEdges}
\Declaration{RemoveEdges}





